前言 ?
伪AI (SHIORI) 可以说是伺か的精神所在，一个撰写良好的 伪AI 除了能提供相当丰富的功能之外，也能将 Ghost 发挥的淋漓尽致。尽管漂亮的 Shell 人人都喜欢，然而我们依然不能否认，最能让人们印象深刻的，还是 Ghost 的个性以及会话内容。因此 伪AI 是绝对不可忽略的一个要素。

在正式进入专栏之前，您必须了解到，这是伺か的进阶文章，难度上会提升许多。因此请务必先完整的看过进阶教学篇，将目录概念建立好，这在编写伪AI的过程将会是很重要的基础知识喔。

↑
概念 ?
在进阶教学的专栏中，我们简介了伪AI，但并没有详细的说明伪AI到底是怎么样的一个事物，在此一并作个解释。另外也请先复习一下目录对应概念，在此就不多作叙述了。

所谓的伪AI，本身仅是个DLL动态连结档，一般由C语言所构成，再经过C语言编译程式编译成DLL。例如华和梨套件整个核心所在，也只是 shiori.dll这个档案，其余的kawari.ini、KEEPS等等文件都是附属于shiori核心之下的档案。其对应关系如下：

　　　　　　　SSP ──┐(SAKURA语法) ↑　　　↓(系统事件)　　　　　　　└─ Shiori.dll　←　kawari.ini　　　　　　　　　　│　　　　　　　　　　└→ AI辞书(纯文字档)其中，kawari.ini主要用来指定要连结的AI语法文件，内容格式为：

   dict:xxx.txt   dict:xxx.txt以下类推。

而在Shiori.dll之中，则定义了 华和梨 这个 伪AI 的所有功能，程式函式以及运作方法。当指定载入华和梨系统的 Ghost 时，Materia 会去呼叫该 Ghost目录 里面的 shiori.dll ，并根据 shiori.dll 里面的定义来读取需要的AI语法文件，并根据内容设计作出相对的反应。

如此，其他的伪AI系统也都是采用这个架构，并遵循着相同的目录对应模式。不过在档名以及语法格式、支援功能等会有不同。使用者可以依照自己的喜好挑选一个 伪AI 来发展自己的人格。

一个简单的概念：如同程式语言之中有VB、JAVA、C等等，虽然架构皆不尽相同，但同样都是程式语言的一种，可以用来发展程式。伪AI也是类似的观念。

↑
核心程式语法 - SAKURA Script ?
核心程式采用的标准语法为 SAKURA Script ，这是一种语言描述字串，主要用来撰写讯息以及提供系统变数用。或许您会对所谓的 SAKURA Script 与 伪AI语法 感到困惑，不是同样都是语法吗？

简单的来说， SAKURA Script 是由核心程式本身提供的事件变数、程式参数，但它仅是单纯的叙述事实以及讯息而已，本身并不包含结构化的程式架构、也无运算判断能力－－明确的说，它仅只 是个“播放器”而已。而上述的这些功能，例如 if 判定、 for 回圈等等演算法，都必须要靠伪AI来提供。然后伪AI再根据AI辞书的内容，产生符合 SAKURA Script 语法的字串，让核心程式去执行。

或许您会问，为何不把伪AI直接作在核心程式里面呢？这就牵扯到伺か本身的特性与自由度的问题了，以目前的架构来说，人人都可以发展自己的伪AI，只要遵循标准的SAKURA语法以及各项规格即可。

如果直接将AI系统制作在核心里面，除了增加程式撰写困难之外(作者只有一人)，也很难有多样化的发展性。如今有如此众多的伪AI可以选择，也归功于这开放的架构。

↑
结语 ?
现在，你应该对“伪AI”这个名词有所了解了。接下来，就请进入SHIORI?列表中，选择一个你偏好的伪AI来制作人格吧。

