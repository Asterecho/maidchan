简述伪AI 
伪AI是架构在伪春菜底下的一只拟似AI(人工智慧)的程式，她专门负责将玩家撰写的语法以及图片资讯解析后，传送给SSP核心程式，让核心程式根据这些资料来作反应，此时你就会看到伪春菜在说话或是改变表情。

因为不是真正的AI，只是模拟一些简单的AI功能，所以日文用伪AI来称呼，其中伪(にせ)是"假的"的意思，中文的话可以称之为拟似人工智慧。

伪AI有个统称叫做shiori，一般以.dll的型态存在，以程式概念来讲，她是个动态联结函式库(也就是程式图书馆的意思)，一般由C语言写成。由于伪AI的规格是开放的，所以有许许多多的伪AI存在着，提供各自专属的语法与功能。

你可以把SSP核心程式想像成一栋洋房，里面可以住很多只伪AI女仆，每只伪AI女仆拥有的能力各有不同，但目的都是相同的，就是作为玩家以及SSP核心程式之间的沟通桥梁。

目录架构 
让我们先来了解一个Ghost的目录架构，要让Ghost正常的运作，必须要遵循这个概念去放置相关档案：

 在这边我们假定你的伪春菜目录名称为"tssp"。如上图所示，人格档案主要是放置在"tsspGhost"之下，个别以Ghost_Name的方式自成一个专属的目录。

-这里为了方便解释，我使用自己建立的Ghost_name目录。-实际上这目录名称是随人格不同而有不同名称的。-如中文版橘花为"KiKKa_C"，日文版橘花为"Taromati"。其中：

．"Ghost_NameGhostMaster" 之下放置的是伪AI人格档案，包括所有的对话以及反应事件等。
 ．"Ghost_NameShellMaster" 之下放置的是该人格专属的Shell图片档案，即实际与玩家互动的人格外表。
 这是最基础的架构，除了Ghost_Name可以随着不同的人格而有所变动之外，其余都必须按照图示的目录名称。另外要注意的是：

．一个人格只能有一个伪AI系统，所以"Ghost_NameGhost"之下的只能有一个目录，而且名称必须是"Master"，用来放置整个Ghost的伪AI档案。
．一个人格可以有多个Shell外观，所以"Ghost_NameShell"之下除了"Master"预设值目录之外，还可以有其他不同名称的目录，内含各种不同的shell图片，如"cloth1"、"cloth2"这样。当其他的Shell目录存在之时，便可以在伪春菜的右键选单之中的"衣物"项目中来选择更换其他的外表，否则就只会看到一个预设Shell能选择。
PS."衣物"这个名称随不同的人格而有不同，这是因为透过伪AI提供的语法设定，可以替换选单的文字样式。


衣着替换范例例如shell目录，底下除了Master外，还有"glorious"这个目录：


在右键选单内的着衣替换项目内，就会多出一个glorious可以选择。

配置档案 
了解了目录架构之后，我们就可以来配置所需要的档案了，以下是各目录要放置的档案列表：

Ghost_Name Ghost主目录，用来放置Ghost以及Shell二个子目录，以及Ghost Banner图示：thumbnail.png也是放置在这里面。 
GhostMaster 伪AI档案，如shiori.dll、misaka.dll、KEEPS等档案都是放在这边。主要为Ghost的对话以及反应、运作时的设定档。 
ShellMaster 预设Shell外观图片全部放在这里，其中的surface.txt指定各个shell的对应以及动画的运作(如眨眼睛) 

除了必要的相关档案之外，您可以自行放置其他如readme.txt之类的说明档，这并不会影响到Ghost的运作。SSP核心程式只会读取必要的档案。

规格之外 
以上所提的是目前公定的格式，但实际上这个目录架构已经历经了许多次的转变，另外又牵涉到SSP核心程式的支援度，这也是会产生相容性问题的原因之一。

由于目录架构以及档案配置不正确，或是使用无法互相匹配的版本，自然人格会无法安装，或者安装后无法正常运作。

